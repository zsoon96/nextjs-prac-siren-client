import Head from 'next/head'
import {Formik} from "formik";
import {Fragment, useCallback, useMemo, useState} from "react"
import produce from 'immer'
import {addDoc, collection, getFirestore, doc, getDoc} from 'firebase/firestore'
import firebaseApp from "../net/firebaseApp";

const formatter = Intl.NumberFormat('ko-kr');

const menu = [
    {name: '에스프레소', price: 2900},
    {name: '아메리카노', price: 3200}
]

// 합계 산출 함수
// you might not need/lodash > lodash에서 제공하는 sum함수를 js로 변환한 코드 활용
const sum = (array) => {
    return array.reduce((acc, num) => {
        acc += num
        return acc
    }, 0)
}

// firebase database 연결
const firebaseDb = getFirestore(firebaseApp)
// firebase database에 컬렉션 생성
const orders = collection(firebaseDb, 'orders')

export default function Home() {
    const [items, setItems] = useState(menu.map(item => ({...item, count: 0}))),
        [order, setOrder] = useState(null)

    const addItem = useCallback((name) => {
        // 파라미터로 받은 name으로 menu 리스트에 있는 item.name과 같은 값만 추출해서 setItems에 담아줌
        // const item = menu.find(item => name === item.name)
        // setItems([...items, item])

        // immer를 활용하여 count 데이터의 불변성 유지
        // immer: 객체구조가 깊어질 경우, 간단하게 불변성을 유지하며 업데이트해 줄 수 있는 라이브러리
        setItems(produce(items, draft => {
            const index = items.findIndex(item => item.name === name)
            draft[index].count++
        }))
    }, [items])

    const removeItem = useCallback((name) => {
        setItems(produce(items, draft => {
            const index = items.findIndex(item => item.name === name)
            if (draft[index].count > 0) {
                draft[index].count--;
            }
        }))
    }, [items])

    // 합계 금액 변수화
    const total = useMemo(() => {
        return sum(items.map(item => item.price * item.count))
    }, [items])

    return (
        <div className='container'>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <div className='container'>
                <h1 className='mt-4 font-bold text-2xl'>커피 주문</h1>

                <Formik
                    initialValues={{
                        name: ''
                    }}
                    validate={(values) => {
                        const errors = {}
                        if (!values.name) {
                            errors.name = '이름을 입력해주세요.'
                        }
                        if (total === 0) {
                            errors.total = '한 개 이상 상품을 담아주세요.'
                        }
                        return errors
                    }}
                    onSubmit={async (values) => {
                        // 주문 시 필요한 order 데이터
                        const order = {
                            // 주문자 이름
                            ...values,
                            // 상품 정보 (메뉴명, 가격, 수량)
                            items,
                            status: '주문 완료',
                            createdAt: new Date()
                        }

                        // firebase database에 저장
                        // 저장 후, _key.path.segments[1] = 데이터 키값 추출
                        const result = await addDoc(orders, order)
                        const id = result._key.path.segments[1]
                        const docRef = doc(firebaseDb, 'orders', id)
                        const orderDoc = await getDoc(docRef)
                        const data = orderDoc.data()
                        setOrder({
                            id, ...data
                        })
                    }}>
                    {({
                          values,
                          errors,
                          touched,
                          handleChange,
                          handleBlur,
                          handleSubmit
                      }) => (
                        <form onSubmit={handleSubmit}>
                            <div className='mt-3'>
                                <input type='text' className='form-control'
                                       name='name'
                                       value={values.name}
                                       onChange={handleChange}
                                       onBlur={handleBlur}
                                       placeholder='이름을 입력해주세요.'/>
                                {errors.name && touched.name &&
                                    <p className='text-danger text-xs mt-1'>{errors.name}</p>}
                            </div>

                            <dl className="row mt-3">
                                {menu.map(item => (
                                    <Fragment key={item.name}>
                                        <dt className="col-sm-3">
                                            <label htmlFor='americano'>{item.name}</label>
                                        </dt>
                                        <dd className="col-sm-9 flex justify-between">
                                            <div>
                                                {formatter.format(item.price)}원
                                            </div>
                                            <div>
                                                <button type='button' className='btn btn-outline-secondary btn-sm mt-1'
                                                        onClick={() => addItem(item.name)}>담기
                                                </button>
                                            </div>
                                        </dd>
                                    </Fragment>
                                ))}
                            </dl>

                            <hr className='mt-2 mb-3'/>

                            <h2 className='mb-2 font-bold text-xl'>주문서</h2>

                            <dl>
                                {items.map(item => (
                                    <Fragment key={item.name}>
                                        <dt>{item.name} &times; {item.count}</dt>
                                        <dd className='flex justify-between'>
                                            <div>
                                                {formatter.format(item.price)}
                                            </div>
                                            <div>
                                                <button type='button' className='btn btn-outline-secondary btn-sm mt-1'
                                                        onClick={() => removeItem(item.name)}>빼기
                                                </button>
                                            </div>
                                        </dd>
                                    </Fragment>
                                ))}
                            </dl>

                            <div>
                                합계: {formatter.format(total)}
                            </div>
                            {errors.total && (<p className='text-danger text-xs mt-1'>{errors.total}</p>)}

                            {!order && (<button type='submit' className='btn btn-info btn-ml mt-3'>주문</button>)}
                            {order && (<p>주문 상태: <span className='text-secondary mt-3'>{order.status}</span></p>)}

                        </form>
                    )}
                </Formik>
            </div>
        </div>
    )
}
